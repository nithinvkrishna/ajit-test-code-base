
$module [tester_control_daemon]
 	$in () $out () $is
{
	$branchblock[loop] {
		$merge $entry loopback $endmerge

		c64 := tester_control_command
		$volatile $split (c64 1 31 32)
					(rwbar a31 wdata)
		$volatile afb_cmd :=
			($concat $zero<1> rwbar (~$zero<4>) ($bitcast ($uint<36>) ($concat a31 $zero<2>)) wdata)
		AFB_ACCELERATOR_REQUEST := afb_cmd
		afb_resp := AFB_ACCELERATOR_RESPONSE

		tester_control_response := ($slice afb_resp 31 0)

		$place [loopback] 
	}
}

$module [tester_memory_access_daemon] $in () $out () $is
{
	$branchblock[loop] {
		$dopipeline $depth 15 $fullrate 
		$merge $entry $loopback 
			$phi acb_command := ACB_ACCELERATOR_MEM_REQUEST $on $entry, $loopback
		$endmerge
		$volatile $split (acb_command 1 1 8 36 64) (lock rwbar bmask a36 wdata)

		tester_mem_access_rwbar   := ($bitcast ($uint<8>) rwbar)
		tester_mem_access_bmask   := bmask
		tester_mem_access_address := ($slice a36 31 0)
		tester_mem_access_wdata   := wdata

		rdata := tester_mem_access_rdata
		ACB_ACCELERATOR_MEM_RESPONSE := ($concat $zero<1> rdata)

		$while 1
	}
}

$module [interrupt_daemon]
	$in () $out () $is
{

	$branchblock[loop] {
		$merge $entry loopback $endmerge

		i := ACCELERATOR_INTERRUPT
		ACCELERATOR_INTERRUPT_8 := ($bitcast ($uint<8>) i)

		$place [loopback]
	}
}
