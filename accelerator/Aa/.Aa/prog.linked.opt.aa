$pipe  ACB_ACCELERATOR_MEM_REQUEST : $uint<110>  $depth 2 
// can point into 
$pipe  ACB_ACCELERATOR_MEM_RESPONSE : $uint<65>  $depth 2 
// can point into 
$pipe  ACCELERATOR_INTERRUPT : $uint<1>  $depth 1  $signal 
// can point into 
$pipe  AFB_ACCELERATOR_REQUEST : $uint<74>  $depth 2  $p2p 
// can point into 
$pipe  AFB_ACCELERATOR_RESPONSE : $uint<33>  $depth 2 
// can point into 
$storage  registers : $array[16] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
// can point into 
$pipe  start_worker : $uint<1>  $depth 1 
// can point into 
$module [accelerator_control_daemon]
$in ()
$out ()
$is
{
  $branchblock [init_loop]
  {
    $merge $entry loopback 
    $phi I := 			  ($bitcast ($uint<5>) _b0  ) $on   $entry 			  nI $on   loopback 
    // type of target is $uint<5>
    $endmerge
    $volatile nI := (I + 1 ) $buffering 1
    registers[I] := 0  $buffering 1// bits of buffering = 32. 
    $if (I < 15 ) $then 
    $place[loopback]
    $endif
  }
  start_worker := 1  $buffering 1// bits of buffering = 1. 
  $branchblock [run_loop]
  {
    $merge $entry loopback 
    $endmerge
    cmd := AFB_ACCELERATOR_REQUEST $buffering 1// bits of buffering = 74. 
    $volatile rwbar := ( $slice cmd 72 72 )  $buffering 1
    $volatile addr := ( $slice cmd 67 32 )  $buffering 1
    $volatile wdata := ( $slice cmd 31 0 )  $buffering 1
    $volatile reg_index := ( $slice addr 5 2 )  $buffering 1
    $guard (rwbar) rdata := registers[reg_index] $buffering 1// bits of buffering = 32. 
    $guard (~rwbar) registers[reg_index] := wdata $buffering 1// bits of buffering = 32. 
    $volatile resp := (($bitcast ($uint<1>) _b0  ) && ( $mux rwbar rdata  0  ) ) $buffering 1
    AFB_ACCELERATOR_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    $place[loopback]
  }
}
$module [accelerator_interrupt_daemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $merge $entry loopback 
    $endmerge
    r0 := registers[0 ] $buffering 1// bits of buffering = 32. 
    ACCELERATOR_INTERRUPT := (r0 [] 4 ) $buffering 1// bits of buffering = 1. 
    $place[loopback]
  }
}
$pipeline $depth 7 $buffering 1 $module [access_mem_128]
$in ( write_bar : $uint<1>   q_word_address : $uint<32>   wline : $uint<128>  )
$out ( rline : $uint<128>  )
$is
{
  $volatile c0 := (((($bitcast ($uint<1>) _b0  ) && write_bar) && ( ~ ($bitcast ($uint<8>) _b0  ) )) && (($bitcast ($uint<36>) q_word_address ) && ( $slice wline 127 64 ) )) $buffering 1
  ACB_ACCELERATOR_MEM_REQUEST := c0 $buffering 1 $mark FIRST_ACCESS // bits of buffering = 110. 
  r0 := ACB_ACCELERATOR_MEM_RESPONSE $buffering 1 $delay (FIRST_ACCESS 4 )  // bits of buffering = 65. 
  c1 := (((($bitcast ($uint<1>) _b0  ) && write_bar) && ( ~ ($bitcast ($uint<8>) _b0  ) )) && (($bitcast ($uint<36>) (q_word_address + 8 ) ) && ( $slice wline 63 0 ) )) $buffering 1// bits of buffering = 110. 
  ACB_ACCELERATOR_MEM_REQUEST := c1 $buffering 1 $mark SECOND_ACCESS // bits of buffering = 110. 
  r1 := ACB_ACCELERATOR_MEM_RESPONSE $buffering 1 $delay (SECOND_ACCESS 4 )  // bits of buffering = 65. 
  slice_171_171_delayed_1_0 := ( $slice r0 63 0 )  $buffering 1 $cut_through // bits of buffering = 64. 
  rline := (slice_171_171_delayed_1_0 && ( $slice r1 63 0 ) ) $buffering 1// bits of buffering = 128. 
  $attribute delay 9
}
$module [execute_job]
$in ()
$out ()
$is
{
  key := ((registers[1 ] && registers[2 ]) && (registers[3 ] && registers[4 ])) $buffering 1// bits of buffering = 128. 
  base_addr := registers[5 ] $buffering 1// bits of buffering = 32. 
  ndwords := registers[6 ] $buffering 1// bits of buffering = 32. 
  $branchblock [loop]
  {
    $dopipeline $depth 7 $buffering 1
    $merge $entry $loopback 
    $phi dword_id := 			  ($bitcast ($uint<32>) _b0  ) $on   $entry 			  n_dword_id $on   $loopback 
    // type of target is $uint<32>
    $endmerge
    $volatile n_dword_id := (dword_id + 2 ) $buffering 1
    $volatile address := (base_addr + (dword_id << 3 )) $buffering 1
    $call access_mem_128 (($bitcast ($uint<1>) _b1  ) address ($bitcast ($uint<128>) _b0  ) ) (line ) 
    $volatile eline := (line ^ key) $buffering 1
    address_234_delayed_9_0 := address $buffering 9 $cut_through // bits of buffering = 288. 
    $call access_mem_128 (($bitcast ($uint<1>) _b0  ) address_234_delayed_9_0 eline ) (ign_line ) 
    $while (n_dword_id < ndwords)
  }
}
$module [accelerator_worker_daemon]
$in ()
$out ()
$is
{
  sw := start_worker $buffering 1// bits of buffering = 1. 
  $branchblock [loop]
  {
    $merge $entry loopback 
    $endmerge
    $merge $entry look_for_command 
    $endmerge
    r0 := registers[0 ] $buffering 1// bits of buffering = 32. 
    $volatile cmd_flag := (((r0 [] 0 ) & (r0 [] 2 )) & ( ~ (r0 [] 3 ) )) $buffering 1
    $if ( ~ cmd_flag ) $then 
    $place[look_for_command]
    $endif
    registers[0 ] := (r0 & ( ~ 36  )) $buffering 1// bits of buffering = 32. 
    $barrier
    $call execute_job () () 
    $barrier
    $volatile set_intr := ((r0 [] 0 ) & (r0 [] 1 )) $buffering 1
    registers[0 ] := ((( $slice r0 31 5 )  && set_intr) && (($bitcast ($uint<1>) _b1  ) && ( $slice r0 2 0 ) )) $buffering 1// bits of buffering = 32. 
    $place[loopback]
  }
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
// Memory space 0: registers 
// use of gated clocks in modules 
