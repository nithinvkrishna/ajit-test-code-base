// Program for finding jitter using timer interrupts
#include <stdint.h>
#include <stdio.h>
#include <ajit_access_routines.h>
#include <ajit_mt_irc.h>
#include <cortos.h>

#define TIMERCOUNT 100000
#define COUNT TIMERCOUNT
#define TIMERINITVAL ((COUNT << 1) | 1)
#define TIME_SCALE_FACTOR (1.0/CLK_FREQUENCY)
#define NSAMPLES  1024

volatile int volatile timer_interrupt_counter = 0;
volatile int volatile exit_flag  = 0;
volatile uint64_t volatile last_time_64 = 0;

volatile uint64_t volatile min_interval  = 10000000;
volatile uint64_t volatile max_interval  = 0;

volatile uint32_t volatile countdown_value = 0xFFFFFFFF;


void clear_and_disable_timer() {
	// clear timer control register.
	__ajit_write_timer_control_register_via_vmap__ (0x0);
    cortos_printf("Timer reg cleared. Timer disabled\n");
}

void enable_and_write_timer(uint32_t countdown_value) {
	// reenable the timer, right away..
	//__ajit_write_timer_control_register_via_vmap__ (TIMERINITVAL);	
	__ajit_write_timer_control_register_via_vmap__ (countdown_value | 1);   // Setting LSB to ensure timer is enabled
    cortos_printf("Timer written with countdown value = 0x%08X\n", countdown_value);
}

void run_timer_ISR_default_example() {
	if(timer_interrupt_counter <= NSAMPLES) {

		uint64_t curr_time_64 = __ajit_get_clock_time();
		if(timer_interrupt_counter > 0)
		{
			uint64_t interval =  (curr_time_64 - last_time_64);
			if(interval < min_interval)
			{
				min_interval = interval;
			}

			if(interval > max_interval)
				max_interval = interval;
		}
		last_time_64 = curr_time_64;
		timer_interrupt_counter++;
	}

	if(timer_interrupt_counter >= NSAMPLES)
		exit_flag = 1;
}

uint32_t read_timer_reg() {
    uint32_t rd_data = __ajit_read_timer_control_register_via_vmap__();
    cortos_printf("Timer register read successfully! Read value = 0x%08X\n", rd_data);
    return rd_data;
}

void check_match_print_status(uint32_t rd_data, uint32_t ref_wr_data, const char* test_name) {
    uint32_t match_status = (rd_data == ref_wr_data);
    if(match_status) {
        cortos_printf("[%s - PASS]\n", test_name);
    }
    else {
        cortos_printf("[%s - FAIL] Value written = 0x%08X, Value read back = 0x%08X\n", test_name, ref_wr_data, rd_data);
    }
}

void verify_timer_read_after_write(uint32_t ref_wr_data) {
    uint32_t rd_data = read_timer_reg();    // Read from register
    check_match_print_status(rd_data, ref_wr_data, "READ AFTER WRITE TEST"); // Check whether read value matches write value
}

/////////////////////////////////////////////
///// TIMER INTERRUPT HANDLER FUNCTION //////
/////////////////////////////////////////////
void my_timer_interrupt_handler()
{
    clear_and_disable_timer();
    enable_and_write_timer(countdown_value);
    run_timer_ISR_default_example();
    verify_timer_read_after_write(countdown_value);
}

void configure_serial_device() {
	//cortos_printf("\n Starting serial configs...");
	// enable serial 0 device..  enable_tx, enable_rx, enable_interrupts	
	__ajit_serial_configure_via_vmap__ (1, 1, 1);
	// set baud rate.
	__ajit_serial_set_baudrate_via_vmap__ (115200, CLK_FREQUENCY);
	// bring uart out of reset.
	__ajit_serial_set_uart_reset_via_vmap__ (0);
	cortos_printf("Serial configuration completed\n");
}

int main () 
{
    configure_serial_device(); // Sets baud rate and other parameters
    cortos_printf("Main program starting...\n");
	// enable interrupt controller for the current thread.
	enableInterruptControllerAndAllInterrupts(0,0);
	// enable the timer, right away..
    enable_and_write_timer(TIMERINITVAL);
    cortos_printf("Main program execution completed\n");
    return(0);
}

